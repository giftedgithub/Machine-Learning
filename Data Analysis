sklearn.cluster Import Kleans

sklearn.datasets Inport make blobs

Leport numpy as np import matplotlib.pyplot as plt

blab_centers пр.аггау ([[ 9.2, 2.3], [-1.5, 2.3], [-2.8, 1.8]. [-2.8, 2.0], [-2.8, 1.3]])

blob std np.array([0.4, 0.3, 0.1, 0.1, 0.1])

X, y make blobs(n_samples-2000, centers-blab centers, cluster std-blob std, randun_state-7)

kmeans

Means (n clusters-k, n init-10, randon state-42)

y pred kuseans.fit predict(X)

plot clusters(X, ywllone):

plt.scatter(X):, ], X, 1], cry, s-1)

plt.xlabel()

plt.ylabel("x 25", rotation-e)

pit. figure(figsize(, 4)) plot clusters (X)

pit.gca().set axisbelow(True)

pit.grid()

plt.show()




 import matplotlib.pyplot as plt
 import seaborn as sns
 import plotly.express as px
 import numpy as np
 import pandas as pd
 import warnings
 warnings.filterwarnings("ignore")
 import plotly.graph_objects as go
 from sklearn.model_selection import train_test_split
 from sklearn.linear_model import LinearRegression
 from sklearn.ensemble import RandomForestRegressor
 from sklearn.svm import SVR
 from sklearn.metrics import mean_squared_error, r2_score
 from sklearn.preprocessing import StandardScaler
 import pandas as pd



import pandas as pd

df = pd.read_csv("/content/Dataset salary 2024.csv")
df.head()



df.nunique()

df.dtypes
#Remote Ratio Each Year: 2020 & 2021 more WFH, 2022 balanced WFH and WFO, 2023 & 2024 more WFO
contingency_table1 = pd.crosstab(df['work_year'], df['remote_ratio'])
#normalizes the contingency table by dividing each cell by the sum of its row.
#This converts the counts into proportions, showing the percentage of each remote_ratio within each work_year.
contingency_table_proportions = contingency_table1.div(contingency_table1.sum(axis=1), axis=0)

plt.figure(figsize=(15, 8))
sns.heatmap(contingency_table_proportions, annot=True, fmt='.2%', cmap='YlGnBu')
plt.title('Contingency Table Heatmap between Work Year and Remote Ratio')
plt.xlabel('Remote Ratio')
plt.ylabel('Work Year')
plt.show()


top 10 job salaries
median_salaries = df.groupby('job_title')['salary_in_usd'].median().reset_index()

top_10_jobs = median_salaries.sort_values(by='salary_in_usd', ascending=False).head(10)

plt.figure(figsize=(12, 8))
sns.barplot(x='salary_in_usd', y='job_title', data=top_10_jobs, palette='viridis')
plt.title('Top 10 Jobs with Highest Salary')
plt.xlabel('Salary')
plt.ylabel('Job')
plt.show()

#Encode categorical column with label encoder (0,1,...)
from sklearn.preprocessing import LabelEncoder

df_test = df[["work_year","experience_level","employment_type","job_title","salary_in_usd","employee_residence","remote_ratio","company_location","company_size"]]

label_encoder = LabelEncoder()
columns_to_encode = ['experience_level','employment_type','job_title','employee_residence','company_location','company_size']

for column in columns_to_encode:
    df_test[column] = label_encoder.fit_transform(df_test[column])


from scipy import stats

features = ["work_year","experience_level","employment_type","job_title","employee_residence","remote_ratio","company_location","company_size"]
label = 'salary_in_usd'

correlation_coefficients = {feature: stats.pointbiserialr(df_test[feature], df_test[label])[0] for feature in features}

correlation_df = pd.DataFrame(list(correlation_coefficients.items()), columns=['Band', 'Correlation'])

correlation_df = correlation_df.sort_values(by='Correlation', ascending=False)

sns.set(style="darkgrid")
plt.figure(figsize=(10, 6))
sns.barplot(x='Correlation', y='Band', data=correlation_df, palette='viridis')
plt.title("Correlation Between Features and Salary")
plt.xlabel("")
plt.ylabel('')
plt.show()




#heatmap
corr_matrix = df_test[["work_year", "experience_level", "employment_type", "job_title", "employee_residence", "remote_ratio", "company_location", "company_size"]].corr()

# Plot the heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Heatmap of Features')
plt.show()


columns = ["work_year","experience_level","employment_type","job_title","employee_residence","remote_ratio","company_location","company_size"]

X = df_test[columns]
y = df_test['salary_in_usd']


import scipy.cluster.hierarchy as sch
import matplotlib.pyplot as plt

dendrogram = sch.dendrogram(sch.linkage(X, method="ward"))
plt.title("Dendrogram (Ward)")
plt.xlabel("Customers")
plt.ylabel("Euclidean Distances")
plt.show()


# Display the first few rows of the dataset
print(df.head())


# Basic information about the dataset
print(df.info())

# Summary statistics
print(df.describe())

# Check for missing values
print(df.isnull().sum())

print("\nData distribution of numeric columns:")
df.hist(bins=30, figsize=(20, 15))
plt.show()

print("\nCountplot of categorical features:")
categorical_features = df.select_dtypes(include=['object']).columns
for feature in categorical_features:
    sns.countplot(y=df[feature])
    plt.show()

# Value counts of categorical columns
print("\nValue counts of categorical columns:")
for feature in categorical_features:
    print(df[feature].value_counts())
    print()

# Heatmap of missing values
print("\nHeatmap of missing values:")
sns.heatmap(df.isnull(), cbar=False, cmap='viridis')
plt.show()
